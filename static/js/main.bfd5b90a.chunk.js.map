{"version":3,"sources":["lib/ChessGame/types/piece.ts","lib/ChessGame/types/field.ts","components/ChessField/constants.ts","components/ChessField/layout.tsx","components/ChessField/ChessField.tsx","components/ChessField/utils.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["PieceColor","PieceType","TileColor","CHESS_FIELD_DARK_TILES_PUBLIC_URL","process","CHESS_FIELD_LIGHT_TILES_PUBLIC_URL","CHESS_PIECES_PUBLIC_URL","ChessFieldContainer","styled","div","ChessFieldTile","props","tileColor","Black","checked","css","ChessPiece","coords","y","x","pieceColor","pieceType","toLowerCase","ChessField","useState","Array","fill","color","map","row","j","tile","i","White","fieldTiles","setFieldTiles","piecesArray","setPiecesPositions","type","xOffset","yOffset","push","id","uuidv4","Pawn","Rook","Knight","Bishop","Queen","King","initializePieces","pieces","setPieces","selectedPieceId","setSelectedPieceId","movePiece","pieceId","newPosition","selectedPieceIndex","findIndex","piece","temp","setFieldTileChecked","field","position","getPieceCoordsById","find","handlePieceClick","tiles","selectedPieceCoords","splice","deletePiece","item","onClick","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bfd5b90a.chunk.js","sourcesContent":["import {ICoords} from './field';\n\nexport enum PieceColor {\n  Black,\n  White\n}\n\nexport enum PieceType {\n  King,\n  Queen,\n  Bishop,\n  Knight,\n  Rook,\n  Pawn\n}\n\nexport interface IPiece {\n  id: string;\n  color: PieceColor;\n  type: PieceType;\n  coords: ICoords;\n}","export enum TileColor {\n  Black,\n  White\n}\n\nexport interface IFieldTile {\n  color: TileColor,\n  checked: boolean\n}\n\nexport interface ICoords {\n  x: number;\n  y: number;\n}","export const CHESS_FIELD_DARK_TILES_PUBLIC_URL = `${process.env.PUBLIC_URL}/assets/tiles/square_brown_dark.svg`;\nexport const CHESS_FIELD_LIGHT_TILES_PUBLIC_URL = `${process.env.PUBLIC_URL}/assets/tiles/square_brown_light.svg`;\nexport const CHESS_PIECES_PUBLIC_URL = `${process.env.PUBLIC_URL}/assets/pieces/`","import styled, { css } from 'styled-components';\nimport { IChessFieldTileProps, IChessPieceProps } from './types';\nimport {\n  PieceType,\n  PieceColor,\n  TileColor,\n} from '../../lib/ChessGame/types';\nimport {\n  CHESS_FIELD_DARK_TILES_PUBLIC_URL,\n  CHESS_FIELD_LIGHT_TILES_PUBLIC_URL, CHESS_PIECES_PUBLIC_URL\n} from './constants';\n\nexport const ChessFieldContainer = styled.div`\n  position: relative;\n  display: flex;\n  flex-wrap: wrap;\n`;\n\n// value 12.5% is using for setting the elements' size to make elements responsive to the container width.\n// 12.5% = 100% / 8 (board has 8 x 8 tiles, so each tile has 12.5% of the board width and height)\n//\n// height: 0 and padding-bottom: 12.5%  are used to make elements' height equal to their width\n// (relative units cannot be used to set the height of an element if the height of the parent element is not explicitly set)\n\nexport const ChessFieldTile = styled.div<IChessFieldTileProps>`\n  width: 12.5%;\n  height: 0;\n  padding-bottom: 12.5%;\n  background-image: ${props => `url(${props.tileColor === TileColor.Black ? CHESS_FIELD_DARK_TILES_PUBLIC_URL : CHESS_FIELD_LIGHT_TILES_PUBLIC_URL})`};\n  box-sizing: border-box;\n  ${props => props.checked ? css`border: 1px solid greenyellow` : css`border: 1px solid transparent`}\n`;\n\nexport const ChessPiece = styled.div<IChessPieceProps>`\n  position: absolute;\n  top: ${props => props.coords.y * 12.5}%;\n  left: ${props => props.coords.x * 12.5}%;\n  width: 12.5%;\n  height: 0;\n  padding-bottom: 12.5%;\n  background-image: ${props => `url(${CHESS_PIECES_PUBLIC_URL}${props.pieceColor === PieceColor.Black ? 'b' : 'w'}_${PieceType[props.pieceType].toLowerCase()}.svg)`};\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: auto 80%;\n  transition: top 0.3s, left 0.3s;\n  box-sizing: border-box;\n`;","import { useState } from 'react';\nimport { ChessFieldContainer, ChessFieldTile, ChessPiece } from './layout';\nimport { ICoords, IFieldTile, IPiece } from '../../lib/ChessGame/types';\nimport { initializeField, initializePieces } from './utils';\n\nexport const ChessField = () => {\n  const [fieldTiles, setFieldTiles] = useState(initializeField());\n  const [pieces, setPieces] = useState(initializePieces());\n\n  const [selectedPieceId, setSelectedPieceId] = useState<string | null>(null);\n\n  const movePiece = (pieces: IPiece[], pieceId: string, newPosition: ICoords) => {\n    const selectedPieceIndex = pieces.findIndex(piece => piece.id === pieceId);\n    const temp = [...pieces];\n    temp[selectedPieceIndex].coords = newPosition;\n    return temp;\n  };\n\n  const deletePiece = (pieces: IPiece[], pieceId: string) => {\n    const selectedPieceIndex = pieces.findIndex(piece => piece.id === pieceId);\n    const temp = [...pieces];\n    temp.splice(selectedPieceIndex, 1);\n    return temp;\n  };\n\n  const setFieldTileChecked = (field: IFieldTile[][], position: ICoords, checked: boolean) => {\n    const temp = [...field];\n    temp[position.y][position.x].checked = checked;\n    return temp;\n  };\n\n  const getPieceCoordsById = (pieces: IPiece[], id: string): ICoords | null => {\n    return pieces.find(piece => piece.id === id)?.coords || null;\n  };\n\n\n  const handleTileClick = (coords: ICoords) => () => {\n    if (selectedPieceId) {\n      setFieldTiles(tiles => {\n        const selectedPieceCoords = getPieceCoordsById(pieces, selectedPieceId);\n        if (selectedPieceCoords) {\n          return setFieldTileChecked(tiles, selectedPieceCoords, false);\n        }\n        return tiles;\n      });\n\n      setPieces(pieces => movePiece(pieces, selectedPieceId, coords));\n      setSelectedPieceId(null);\n    }\n  };\n\n  const handlePieceClick = (id: string, coords: ICoords) => () => {\n    if (selectedPieceId === id) {\n      setFieldTiles(tiles => {\n        const selectedPieceCoords = getPieceCoordsById(pieces, selectedPieceId);\n        if (selectedPieceCoords) {\n          return setFieldTileChecked(tiles, selectedPieceCoords, false);\n        }\n        return tiles;\n      });\n      setSelectedPieceId(null);\n      return;\n    }\n    if (selectedPieceId) {\n      setPieces(pieces => {\n        const temp = deletePiece(pieces, id);\n        return movePiece(temp, selectedPieceId, coords);\n      });\n      setFieldTiles(tiles => {\n        const selectedPieceCoords = getPieceCoordsById(pieces, selectedPieceId);\n        if (selectedPieceCoords) {\n          return setFieldTileChecked(tiles, selectedPieceCoords, false);\n        }\n        return tiles;\n      });\n      setSelectedPieceId(null);\n    } else {\n      setSelectedPieceId(id);\n      setFieldTiles(tiles => setFieldTileChecked(tiles, coords, true));\n    }\n  };\n\n  return (\n    <ChessFieldContainer>\n      {\n        fieldTiles.map((row, y) => (\n          row.map((item, x) => {\n            return <ChessFieldTile\n              tileColor={item.color}\n              checked={item.checked}\n              onClick={handleTileClick({x, y})}\n            />;\n          })\n        ))\n      }\n      {\n        pieces.map(({id, type, color, coords}) => (\n          <ChessPiece\n            key={id}\n            pieceType={type}\n            pieceColor={color}\n            coords={coords}\n            onClick={handlePieceClick(id, coords)}\n          />\n        ))\n      }\n    </ChessFieldContainer>\n  );\n};","import {\n  IFieldTile,\n  IPiece,\n  PieceColor,\n  PieceType,\n  TileColor\n} from '../../lib/ChessGame/types';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const initializePieces = () => {\n  const piecesArray: IPiece[] = [];\n  const setPiecesPositions = (type: PieceType, xOffset: number, yOffset: number) => {\n    piecesArray.push({\n      id: uuidv4(),\n      color: PieceColor.Black,\n      type: type,\n      coords: {x: xOffset, y: yOffset}\n    });\n    piecesArray.push({\n      id: uuidv4(),\n      color: PieceColor.Black,\n      type: type,\n      coords: {x: 7 - xOffset, y: yOffset}\n    });\n    piecesArray.push({\n      id: uuidv4(),\n      color: PieceColor.White,\n      type: type,\n      coords: {x: xOffset, y: 7 - yOffset}\n    });\n    piecesArray.push({\n      id: uuidv4(),\n      color: PieceColor.White,\n      type: type,\n      coords: {x: 7 - xOffset, y: 7 - yOffset}\n    });\n  };\n  //Pawns positioning\n  for (let i = 0; i < 4; ++i) {\n    setPiecesPositions(PieceType.Pawn, i, 1);\n  }\n  setPiecesPositions(PieceType.Rook, 0, 0);\n  setPiecesPositions(PieceType.Knight, 1, 0);\n  setPiecesPositions(PieceType.Bishop, 2, 0);\n  piecesArray.push({\n    id: uuidv4(),\n    color: PieceColor.Black,\n    type: PieceType.Queen,\n    coords: {x: 3, y: 0}\n  });\n  piecesArray.push({\n    id: uuidv4(),\n    color: PieceColor.Black,\n    type: PieceType.King,\n    coords: {x: 4, y: 0}\n  });\n\n  piecesArray.push({\n    id: uuidv4(),\n    color: PieceColor.White,\n    type: PieceType.Queen,\n    coords: {x: 3, y: 7}\n  });\n  piecesArray.push({\n    id: uuidv4(),\n    color: PieceColor.White,\n    type: PieceType.King,\n    coords: {x: 4, y: 7}\n  });\n  return piecesArray;\n};\n\nexport const initializeField = () => {\n  // Init empty two-dimensional array 8x8\n  const field = new Array<IFieldTile[]>(8)\n  .fill(new Array<IFieldTile>(8).fill({\n    color: TileColor.Black,\n    checked: false\n  }));\n\n  return field.map((row, j) => {\n    return row.map((tile, i) => ({\n        color: (i + j) % 2\n          ? TileColor.Black\n          : TileColor.White,\n        checked: false\n      })\n    );\n  });\n};","import React from 'react';\nimport {ChessField} from './components';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ChessField/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}